// Code generated by Kitex v0.13.1. DO NOT EDIT.

package wordservice

import (
	"context"
	"errors"
	words "github.com/Trae-AI/stream-to-river/rpcservice/kitex_gen/words"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Chat": kitex.NewMethodInfo(
		chatHandler,
		newWordServiceChatArgs,
		newWordServiceChatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"GetWordList": kitex.NewMethodInfo(
		getWordListHandler,
		newWordServiceGetWordListArgs,
		newWordServiceGetWordListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetWordDetail": kitex.NewMethodInfo(
		getWordDetailHandler,
		newWordServiceGetWordDetailArgs,
		newWordServiceGetWordDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetWordByID": kitex.NewMethodInfo(
		getWordByIDHandler,
		newWordServiceGetWordByIDArgs,
		newWordServiceGetWordByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AddNewWord": kitex.NewMethodInfo(
		addNewWordHandler,
		newWordServiceAddNewWordArgs,
		newWordServiceAddNewWordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateWordTagID": kitex.NewMethodInfo(
		updateWordTagIDHandler,
		newWordServiceUpdateWordTagIDArgs,
		newWordServiceUpdateWordTagIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetReviewWordList": kitex.NewMethodInfo(
		getReviewWordListHandler,
		newWordServiceGetReviewWordListArgs,
		newWordServiceGetReviewWordListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTodayReviewProgress": kitex.NewMethodInfo(
		getTodayReviewProgressHandler,
		newWordServiceGetTodayReviewProgressArgs,
		newWordServiceGetTodayReviewProgressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SubmitAnswer": kitex.NewMethodInfo(
		submitAnswerHandler,
		newWordServiceSubmitAnswerArgs,
		newWordServiceSubmitAnswerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSupportedTags": kitex.NewMethodInfo(
		getSupportedTagsHandler,
		newWordServiceGetSupportedTagsArgs,
		newWordServiceGetSupportedTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	wordServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return wordServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "WordService"
	handlerType := (*words.WordService)(nil)
	extra := map[string]interface{}{
		"PackageName": "words",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func chatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[words.ChatResp](st)
	req := new(words.ChatReq)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(words.WordService).Chat(ctx, req, stream)
}

func newWordServiceChatArgs() interface{} {
	return words.NewWordServiceChatArgs()
}

func newWordServiceChatResult() interface{} {
	return words.NewWordServiceChatResult()
}

func getWordListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetWordListArgs)
	realResult := result.(*words.WordServiceGetWordListResult)
	success, err := handler.(words.WordService).GetWordList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetWordListArgs() interface{} {
	return words.NewWordServiceGetWordListArgs()
}

func newWordServiceGetWordListResult() interface{} {
	return words.NewWordServiceGetWordListResult()
}

func getWordDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetWordDetailArgs)
	realResult := result.(*words.WordServiceGetWordDetailResult)
	success, err := handler.(words.WordService).GetWordDetail(ctx, realArg.WordName)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetWordDetailArgs() interface{} {
	return words.NewWordServiceGetWordDetailArgs()
}

func newWordServiceGetWordDetailResult() interface{} {
	return words.NewWordServiceGetWordDetailResult()
}

func getWordByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetWordByIDArgs)
	realResult := result.(*words.WordServiceGetWordByIDResult)
	success, err := handler.(words.WordService).GetWordByID(ctx, realArg.WordId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetWordByIDArgs() interface{} {
	return words.NewWordServiceGetWordByIDArgs()
}

func newWordServiceGetWordByIDResult() interface{} {
	return words.NewWordServiceGetWordByIDResult()
}

func addNewWordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceAddNewWordArgs)
	realResult := result.(*words.WordServiceAddNewWordResult)
	success, err := handler.(words.WordService).AddNewWord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceAddNewWordArgs() interface{} {
	return words.NewWordServiceAddNewWordArgs()
}

func newWordServiceAddNewWordResult() interface{} {
	return words.NewWordServiceAddNewWordResult()
}

func updateWordTagIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceUpdateWordTagIDArgs)
	realResult := result.(*words.WordServiceUpdateWordTagIDResult)
	success, err := handler.(words.WordService).UpdateWordTagID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceUpdateWordTagIDArgs() interface{} {
	return words.NewWordServiceUpdateWordTagIDArgs()
}

func newWordServiceUpdateWordTagIDResult() interface{} {
	return words.NewWordServiceUpdateWordTagIDResult()
}

func getReviewWordListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetReviewWordListArgs)
	realResult := result.(*words.WordServiceGetReviewWordListResult)
	success, err := handler.(words.WordService).GetReviewWordList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetReviewWordListArgs() interface{} {
	return words.NewWordServiceGetReviewWordListArgs()
}

func newWordServiceGetReviewWordListResult() interface{} {
	return words.NewWordServiceGetReviewWordListResult()
}

func getTodayReviewProgressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetTodayReviewProgressArgs)
	realResult := result.(*words.WordServiceGetTodayReviewProgressResult)
	success, err := handler.(words.WordService).GetTodayReviewProgress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetTodayReviewProgressArgs() interface{} {
	return words.NewWordServiceGetTodayReviewProgressArgs()
}

func newWordServiceGetTodayReviewProgressResult() interface{} {
	return words.NewWordServiceGetTodayReviewProgressResult()
}

func submitAnswerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceSubmitAnswerArgs)
	realResult := result.(*words.WordServiceSubmitAnswerResult)
	success, err := handler.(words.WordService).SubmitAnswer(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceSubmitAnswerArgs() interface{} {
	return words.NewWordServiceSubmitAnswerArgs()
}

func newWordServiceSubmitAnswerResult() interface{} {
	return words.NewWordServiceSubmitAnswerResult()
}

func getSupportedTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*words.WordServiceGetSupportedTagsArgs)
	realResult := result.(*words.WordServiceGetSupportedTagsResult)
	success, err := handler.(words.WordService).GetSupportedTags(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newWordServiceGetSupportedTagsArgs() interface{} {
	return words.NewWordServiceGetSupportedTagsArgs()
}

func newWordServiceGetSupportedTagsResult() interface{} {
	return words.NewWordServiceGetSupportedTagsResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Chat(ctx context.Context, req *words.ChatReq) (WordService_ChatClient, error) {
	st, err := p.sc.StreamX(ctx, "Chat")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[words.ChatResp](st)
	if err := stream.SendMsg(ctx, req); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) GetWordList(ctx context.Context, req *words.WordListReq) (r *words.WordListResp, err error) {
	var _args words.WordServiceGetWordListArgs
	_args.Req = req
	var _result words.WordServiceGetWordListResult
	if err = p.c.Call(ctx, "GetWordList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWordDetail(ctx context.Context, wordName string) (r *words.WordDetail, err error) {
	var _args words.WordServiceGetWordDetailArgs
	_args.WordName = wordName
	var _result words.WordServiceGetWordDetailResult
	if err = p.c.Call(ctx, "GetWordDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWordByID(ctx context.Context, wordId int64) (r *words.WordResp, err error) {
	var _args words.WordServiceGetWordByIDArgs
	_args.WordId = wordId
	var _result words.WordServiceGetWordByIDResult
	if err = p.c.Call(ctx, "GetWordByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNewWord(ctx context.Context, req *words.AddWordReq) (r *words.WordResp, err error) {
	var _args words.WordServiceAddNewWordArgs
	_args.Req = req
	var _result words.WordServiceAddNewWordResult
	if err = p.c.Call(ctx, "AddNewWord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateWordTagID(ctx context.Context, req *words.UpdateWordTag) (r *words.WordResp, err error) {
	var _args words.WordServiceUpdateWordTagIDArgs
	_args.Req = req
	var _result words.WordServiceUpdateWordTagIDResult
	if err = p.c.Call(ctx, "UpdateWordTagID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetReviewWordList(ctx context.Context, req *words.ReviewListReq) (r *words.ReviewListResp, err error) {
	var _args words.WordServiceGetReviewWordListArgs
	_args.Req = req
	var _result words.WordServiceGetReviewWordListResult
	if err = p.c.Call(ctx, "GetReviewWordList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTodayReviewProgress(ctx context.Context, req *words.ReviewProgressReq) (r *words.ReviewProgressResp, err error) {
	var _args words.WordServiceGetTodayReviewProgressArgs
	_args.Req = req
	var _result words.WordServiceGetTodayReviewProgressResult
	if err = p.c.Call(ctx, "GetTodayReviewProgress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitAnswer(ctx context.Context, req *words.SubmitAnswerReq) (r *words.SubmitAnswerResp, err error) {
	var _args words.WordServiceSubmitAnswerArgs
	_args.Req = req
	var _result words.WordServiceSubmitAnswerResult
	if err = p.c.Call(ctx, "SubmitAnswer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSupportedTags(ctx context.Context, req *words.GetTagsReq) (r *words.GetTagsResp, err error) {
	var _args words.WordServiceGetSupportedTagsArgs
	_args.Req = req
	var _result words.WordServiceGetSupportedTagsResult
	if err = p.c.Call(ctx, "GetSupportedTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
