// Code generated by Kitex v0.13.1. DO NOT EDIT.

package wordservice

import (
	"context"
	words "github.com/Trae-AI/stream-to-river/rpcservice/kitex_gen/words"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Chat(ctx context.Context, req *words.ChatReq, callOptions ...streamcall.Option) (stream WordService_ChatClient, err error)
	GetWordList(ctx context.Context, req *words.WordListReq, callOptions ...callopt.Option) (r *words.WordListResp, err error)
	GetWordDetail(ctx context.Context, wordName string, callOptions ...callopt.Option) (r *words.WordDetail, err error)
	GetWordByID(ctx context.Context, wordId int64, callOptions ...callopt.Option) (r *words.WordResp, err error)
	AddNewWord(ctx context.Context, req *words.AddWordReq, callOptions ...callopt.Option) (r *words.WordResp, err error)
	UpdateWordTagID(ctx context.Context, req *words.UpdateWordTag, callOptions ...callopt.Option) (r *words.WordResp, err error)
	GetReviewWordList(ctx context.Context, req *words.ReviewListReq, callOptions ...callopt.Option) (r *words.ReviewListResp, err error)
	GetTodayReviewProgress(ctx context.Context, req *words.ReviewProgressReq, callOptions ...callopt.Option) (r *words.ReviewProgressResp, err error)
	SubmitAnswer(ctx context.Context, req *words.SubmitAnswerReq, callOptions ...callopt.Option) (r *words.SubmitAnswerResp, err error)
	GetSupportedTags(ctx context.Context, req *words.GetTagsReq, callOptions ...callopt.Option) (r *words.GetTagsResp, err error)
}

type WordService_ChatClient streaming.ServerStreamingClient[words.ChatResp]

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.TTHeaderStreaming))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kWordServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kWordServiceClient struct {
	*kClient
}

func (p *kWordServiceClient) Chat(ctx context.Context, req *words.ChatReq, callOptions ...streamcall.Option) (stream WordService_ChatClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.Chat(ctx, req)
}

func (p *kWordServiceClient) GetWordList(ctx context.Context, req *words.WordListReq, callOptions ...callopt.Option) (r *words.WordListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWordList(ctx, req)
}

func (p *kWordServiceClient) GetWordDetail(ctx context.Context, wordName string, callOptions ...callopt.Option) (r *words.WordDetail, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWordDetail(ctx, wordName)
}

func (p *kWordServiceClient) GetWordByID(ctx context.Context, wordId int64, callOptions ...callopt.Option) (r *words.WordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWordByID(ctx, wordId)
}

func (p *kWordServiceClient) AddNewWord(ctx context.Context, req *words.AddWordReq, callOptions ...callopt.Option) (r *words.WordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddNewWord(ctx, req)
}

func (p *kWordServiceClient) UpdateWordTagID(ctx context.Context, req *words.UpdateWordTag, callOptions ...callopt.Option) (r *words.WordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateWordTagID(ctx, req)
}

func (p *kWordServiceClient) GetReviewWordList(ctx context.Context, req *words.ReviewListReq, callOptions ...callopt.Option) (r *words.ReviewListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetReviewWordList(ctx, req)
}

func (p *kWordServiceClient) GetTodayReviewProgress(ctx context.Context, req *words.ReviewProgressReq, callOptions ...callopt.Option) (r *words.ReviewProgressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTodayReviewProgress(ctx, req)
}

func (p *kWordServiceClient) SubmitAnswer(ctx context.Context, req *words.SubmitAnswerReq, callOptions ...callopt.Option) (r *words.SubmitAnswerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitAnswer(ctx, req)
}

func (p *kWordServiceClient) GetSupportedTags(ctx context.Context, req *words.GetTagsReq, callOptions ...callopt.Option) (r *words.GetTagsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSupportedTags(ctx, req)
}
