// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package words

import (
	"context"
	"fmt"
	"github.com/Trae-AI/stream-to-river/rpcservice/kitex_gen/base"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type PronounceInfo struct {
	Phonetic string `thrift:"phonetic,1" frugal:"1,default,string" form:"phonetic" json:"phonetic" query:"phonetic"`
	Url      string `thrift:"url,2" frugal:"2,default,string" form:"url" json:"url" query:"url"`
}

func NewPronounceInfo() *PronounceInfo {
	return &PronounceInfo{}
}

func (p *PronounceInfo) InitDefault() {
}

func (p *PronounceInfo) GetPhonetic() (v string) {
	return p.Phonetic
}

func (p *PronounceInfo) GetUrl() (v string) {
	return p.Url
}
func (p *PronounceInfo) SetPhonetic(val string) {
	p.Phonetic = val
}
func (p *PronounceInfo) SetUrl(val string) {
	p.Url = val
}

func (p *PronounceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PronounceInfo(%+v)", *p)
}

var fieldIDToName_PronounceInfo = map[int16]string{
	1: "phonetic",
	2: "url",
}

type SentenceInfo struct {
	Text     string `thrift:"text,1" frugal:"1,default,string" form:"text" json:"text" query:"text"`
	AudioUrl string `thrift:"audio_url,2" frugal:"2,default,string" form:"audio_url" json:"audio_url" query:"audio_url"`
}

func NewSentenceInfo() *SentenceInfo {
	return &SentenceInfo{}
}

func (p *SentenceInfo) InitDefault() {
}

func (p *SentenceInfo) GetText() (v string) {
	return p.Text
}

func (p *SentenceInfo) GetAudioUrl() (v string) {
	return p.AudioUrl
}
func (p *SentenceInfo) SetText(val string) {
	p.Text = val
}
func (p *SentenceInfo) SetAudioUrl(val string) {
	p.AudioUrl = val
}

func (p *SentenceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SentenceInfo(%+v)", *p)
}

var fieldIDToName_SentenceInfo = map[int16]string{
	1: "text",
	2: "audio_url",
}

type Word struct {
	WordId      int64           `thrift:"word_id,1" frugal:"1,default,i64" form:"word_id" json:"word_id" query:"word_id"`
	WordName    string          `thrift:"word_name,2" frugal:"2,default,string" form:"word_name" json:"word_name" query:"word_name"`
	Description string          `thrift:"description,3" frugal:"3,default,string" form:"description" json:"description" query:"description"`
	Explains    string          `thrift:"explains,4" frugal:"4,default,string" form:"explains" json:"explains" query:"explains"`
	PronounceUs *PronounceInfo  `thrift:"pronounce_us,5" frugal:"5,default,PronounceInfo" form:"pronounce_us" json:"pronounce_us" query:"pronounce_us"`
	PronounceUk *PronounceInfo  `thrift:"pronounce_uk,6" frugal:"6,default,PronounceInfo" form:"pronounce_uk" json:"pronounce_uk" query:"pronounce_uk"`
	TagId       int32           `thrift:"tag_id,7" frugal:"7,default,i32" form:"tag_id" json:"tag_id" query:"tag_id"`
	Level       int32           `thrift:"level,8" frugal:"8,default,i32" form:"level" json:"level" query:"level"`
	MaxLevel    int32           `thrift:"max_level,9" frugal:"9,default,i32" form:"max_level" json:"max_level" query:"max_level"`
	Sentences   []*SentenceInfo `thrift:"sentences,10" frugal:"10,default,list<SentenceInfo>" form:"sentences" json:"sentences" query:"sentences"`
}

func NewWord() *Word {
	return &Word{}
}

func (p *Word) InitDefault() {
}

func (p *Word) GetWordId() (v int64) {
	return p.WordId
}

func (p *Word) GetWordName() (v string) {
	return p.WordName
}

func (p *Word) GetDescription() (v string) {
	return p.Description
}

func (p *Word) GetExplains() (v string) {
	return p.Explains
}

var Word_PronounceUs_DEFAULT *PronounceInfo

func (p *Word) GetPronounceUs() (v *PronounceInfo) {
	if !p.IsSetPronounceUs() {
		return Word_PronounceUs_DEFAULT
	}
	return p.PronounceUs
}

var Word_PronounceUk_DEFAULT *PronounceInfo

func (p *Word) GetPronounceUk() (v *PronounceInfo) {
	if !p.IsSetPronounceUk() {
		return Word_PronounceUk_DEFAULT
	}
	return p.PronounceUk
}

func (p *Word) GetTagId() (v int32) {
	return p.TagId
}

func (p *Word) GetLevel() (v int32) {
	return p.Level
}

func (p *Word) GetMaxLevel() (v int32) {
	return p.MaxLevel
}

func (p *Word) GetSentences() (v []*SentenceInfo) {
	return p.Sentences
}
func (p *Word) SetWordId(val int64) {
	p.WordId = val
}
func (p *Word) SetWordName(val string) {
	p.WordName = val
}
func (p *Word) SetDescription(val string) {
	p.Description = val
}
func (p *Word) SetExplains(val string) {
	p.Explains = val
}
func (p *Word) SetPronounceUs(val *PronounceInfo) {
	p.PronounceUs = val
}
func (p *Word) SetPronounceUk(val *PronounceInfo) {
	p.PronounceUk = val
}
func (p *Word) SetTagId(val int32) {
	p.TagId = val
}
func (p *Word) SetLevel(val int32) {
	p.Level = val
}
func (p *Word) SetMaxLevel(val int32) {
	p.MaxLevel = val
}
func (p *Word) SetSentences(val []*SentenceInfo) {
	p.Sentences = val
}

func (p *Word) IsSetPronounceUs() bool {
	return p.PronounceUs != nil
}

func (p *Word) IsSetPronounceUk() bool {
	return p.PronounceUk != nil
}

func (p *Word) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Word(%+v)", *p)
}

var fieldIDToName_Word = map[int16]string{
	1:  "word_id",
	2:  "word_name",
	3:  "description",
	4:  "explains",
	5:  "pronounce_us",
	6:  "pronounce_uk",
	7:  "tag_id",
	8:  "level",
	9:  "max_level",
	10: "sentences",
}

type AddWordReq struct {
	UserId   int64  `thrift:"user_id,1" frugal:"1,default,i64" form:"user_id" json:"user_id" query:"user_id"`
	WordName string `thrift:"word_name,2" frugal:"2,default,string" form:"word" json:"word"`
	TagId    int32  `thrift:"tag_id,3" frugal:"3,default,i32" form:"tag_id" json:"tag_id"`
}

func NewAddWordReq() *AddWordReq {
	return &AddWordReq{}
}

func (p *AddWordReq) InitDefault() {
}

func (p *AddWordReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *AddWordReq) GetWordName() (v string) {
	return p.WordName
}

func (p *AddWordReq) GetTagId() (v int32) {
	return p.TagId
}
func (p *AddWordReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *AddWordReq) SetWordName(val string) {
	p.WordName = val
}
func (p *AddWordReq) SetTagId(val int32) {
	p.TagId = val
}

func (p *AddWordReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddWordReq(%+v)", *p)
}

var fieldIDToName_AddWordReq = map[int16]string{
	1: "user_id",
	2: "word_name",
	3: "tag_id",
}

type UpdateWordTag struct {
	WordId int64 `thrift:"word_id,1" frugal:"1,default,i64" form:"word_id" json:"word_id"`
	UserId int64 `thrift:"user_id,2" frugal:"2,default,i64" form:"user_id" json:"user_id" query:"user_id"`
	TagId  int32 `thrift:"tag_id,3" frugal:"3,default,i32" form:"tag_id" json:"tag_id"`
}

func NewUpdateWordTag() *UpdateWordTag {
	return &UpdateWordTag{}
}

func (p *UpdateWordTag) InitDefault() {
}

func (p *UpdateWordTag) GetWordId() (v int64) {
	return p.WordId
}

func (p *UpdateWordTag) GetUserId() (v int64) {
	return p.UserId
}

func (p *UpdateWordTag) GetTagId() (v int32) {
	return p.TagId
}
func (p *UpdateWordTag) SetWordId(val int64) {
	p.WordId = val
}
func (p *UpdateWordTag) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateWordTag) SetTagId(val int32) {
	p.TagId = val
}

func (p *UpdateWordTag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateWordTag(%+v)", *p)
}

var fieldIDToName_UpdateWordTag = map[int16]string{
	1: "word_id",
	2: "user_id",
	3: "tag_id",
}

type WordListReq struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" form:"user_id" json:"user_id" query:"user_id"`
	Offset int64 `thrift:"offset,2" frugal:"2,default,i64" json:"offset" query:"offset"`
	Num    int64 `thrift:"num,3" frugal:"3,default,i64" json:"num" query:"num"`
}

func NewWordListReq() *WordListReq {
	return &WordListReq{}
}

func (p *WordListReq) InitDefault() {
}

func (p *WordListReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *WordListReq) GetOffset() (v int64) {
	return p.Offset
}

func (p *WordListReq) GetNum() (v int64) {
	return p.Num
}
func (p *WordListReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *WordListReq) SetOffset(val int64) {
	p.Offset = val
}
func (p *WordListReq) SetNum(val int64) {
	p.Num = val
}

func (p *WordListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordListReq(%+v)", *p)
}

var fieldIDToName_WordListReq = map[int16]string{
	1: "user_id",
	2: "offset",
	3: "num",
}

type WordListResp struct {
	WordsList []*Word        `thrift:"words_list,1" frugal:"1,default,list<Word>" form:"words_list" json:"words_list" query:"words_list"`
	BaseResp  *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewWordListResp() *WordListResp {
	return &WordListResp{}
}

func (p *WordListResp) InitDefault() {
}

func (p *WordListResp) GetWordsList() (v []*Word) {
	return p.WordsList
}

var WordListResp_BaseResp_DEFAULT *base.BaseResp

func (p *WordListResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return WordListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *WordListResp) SetWordsList(val []*Word) {
	p.WordsList = val
}
func (p *WordListResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *WordListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *WordListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordListResp(%+v)", *p)
}

var fieldIDToName_WordListResp = map[int16]string{
	1:   "words_list",
	255: "BaseResp",
}

type ChatReq struct {
	Prompt         string `thrift:"prompt,1" frugal:"1,default,string" json:"prompt" query:"p"`
	QueryMsg       string `thrift:"queryMsg,2" frugal:"2,default,string" json:"queryMsg" query:"q"`
	ConversationId string `thrift:"conversation_id,3" frugal:"3,default,string" form:"conversation_id" json:"conversation_id" query:"conversation_id"`
}

func NewChatReq() *ChatReq {
	return &ChatReq{}
}

func (p *ChatReq) InitDefault() {
}

func (p *ChatReq) GetPrompt() (v string) {
	return p.Prompt
}

func (p *ChatReq) GetQueryMsg() (v string) {
	return p.QueryMsg
}

func (p *ChatReq) GetConversationId() (v string) {
	return p.ConversationId
}
func (p *ChatReq) SetPrompt(val string) {
	p.Prompt = val
}
func (p *ChatReq) SetQueryMsg(val string) {
	p.QueryMsg = val
}
func (p *ChatReq) SetConversationId(val string) {
	p.ConversationId = val
}

func (p *ChatReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatReq(%+v)", *p)
}

var fieldIDToName_ChatReq = map[int16]string{
	1: "prompt",
	2: "queryMsg",
	3: "conversation_id",
}

type ChatResp struct {
	Msg   string            `thrift:"msg,1" frugal:"1,default,string" form:"msg" json:"msg" query:"msg"`
	Extra map[string]string `thrift:"extra,2" frugal:"2,default,map<string:string>" form:"extra" json:"extra" query:"extra"`
}

func NewChatResp() *ChatResp {
	return &ChatResp{}
}

func (p *ChatResp) InitDefault() {
}

func (p *ChatResp) GetMsg() (v string) {
	return p.Msg
}

func (p *ChatResp) GetExtra() (v map[string]string) {
	return p.Extra
}
func (p *ChatResp) SetMsg(val string) {
	p.Msg = val
}
func (p *ChatResp) SetExtra(val map[string]string) {
	p.Extra = val
}

func (p *ChatResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatResp(%+v)", *p)
}

var fieldIDToName_ChatResp = map[int16]string{
	1: "msg",
	2: "extra",
}

type ReviewListReq struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" form:"user_id" json:"user_id" query:"user_id"`
}

func NewReviewListReq() *ReviewListReq {
	return &ReviewListReq{}
}

func (p *ReviewListReq) InitDefault() {
}

func (p *ReviewListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *ReviewListReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *ReviewListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewListReq(%+v)", *p)
}

var fieldIDToName_ReviewListReq = map[int16]string{
	1: "user_id",
}

type OptionItem struct {
	Description  string `thrift:"description,1" frugal:"1,default,string" form:"description" json:"description" query:"description"`
	AnswerListId int64  `thrift:"answer_list_id,2" frugal:"2,default,i64" form:"answer_list_id" json:"answer_list_id" query:"answer_list_id"`
}

func NewOptionItem() *OptionItem {
	return &OptionItem{}
}

func (p *OptionItem) InitDefault() {
}

func (p *OptionItem) GetDescription() (v string) {
	return p.Description
}

func (p *OptionItem) GetAnswerListId() (v int64) {
	return p.AnswerListId
}
func (p *OptionItem) SetDescription(val string) {
	p.Description = val
}
func (p *OptionItem) SetAnswerListId(val int64) {
	p.AnswerListId = val
}

func (p *OptionItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OptionItem(%+v)", *p)
}

var fieldIDToName_OptionItem = map[int16]string{
	1: "description",
	2: "answer_list_id",
}

type ReviewQuestion struct {
	Question     string        `thrift:"question,1" frugal:"1,default,string" form:"question" json:"question" query:"question"`
	WordId       int64         `thrift:"word_id,2" frugal:"2,default,i64" form:"word_id" json:"word_id" query:"word_id"`
	QuestionType int64         `thrift:"question_type,3" frugal:"3,default,i64" form:"question_type" json:"question_type" query:"question_type"`
	Options      []*OptionItem `thrift:"options,4" frugal:"4,default,list<OptionItem>" form:"options" json:"options" query:"options"`
	ShowInfo     []string      `thrift:"show_info,5,optional" frugal:"5,optional,list<string>" form:"show_info" json:"show_info,omitempty" query:"show_info"`
}

func NewReviewQuestion() *ReviewQuestion {
	return &ReviewQuestion{}
}

func (p *ReviewQuestion) InitDefault() {
}

func (p *ReviewQuestion) GetQuestion() (v string) {
	return p.Question
}

func (p *ReviewQuestion) GetWordId() (v int64) {
	return p.WordId
}

func (p *ReviewQuestion) GetQuestionType() (v int64) {
	return p.QuestionType
}

func (p *ReviewQuestion) GetOptions() (v []*OptionItem) {
	return p.Options
}

var ReviewQuestion_ShowInfo_DEFAULT []string

func (p *ReviewQuestion) GetShowInfo() (v []string) {
	if !p.IsSetShowInfo() {
		return ReviewQuestion_ShowInfo_DEFAULT
	}
	return p.ShowInfo
}
func (p *ReviewQuestion) SetQuestion(val string) {
	p.Question = val
}
func (p *ReviewQuestion) SetWordId(val int64) {
	p.WordId = val
}
func (p *ReviewQuestion) SetQuestionType(val int64) {
	p.QuestionType = val
}
func (p *ReviewQuestion) SetOptions(val []*OptionItem) {
	p.Options = val
}
func (p *ReviewQuestion) SetShowInfo(val []string) {
	p.ShowInfo = val
}

func (p *ReviewQuestion) IsSetShowInfo() bool {
	return p.ShowInfo != nil
}

func (p *ReviewQuestion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewQuestion(%+v)", *p)
}

var fieldIDToName_ReviewQuestion = map[int16]string{
	1: "question",
	2: "word_id",
	3: "question_type",
	4: "options",
	5: "show_info",
}

type ReviewListResp struct {
	TotalNum  string            `thrift:"total_num,1" frugal:"1,default,string" form:"total_num" json:"total_num" query:"total_num"`
	Questions []*ReviewQuestion `thrift:"questions,2" frugal:"2,default,list<ReviewQuestion>" form:"questions" json:"questions" query:"questions"`
}

func NewReviewListResp() *ReviewListResp {
	return &ReviewListResp{}
}

func (p *ReviewListResp) InitDefault() {
}

func (p *ReviewListResp) GetTotalNum() (v string) {
	return p.TotalNum
}

func (p *ReviewListResp) GetQuestions() (v []*ReviewQuestion) {
	return p.Questions
}
func (p *ReviewListResp) SetTotalNum(val string) {
	p.TotalNum = val
}
func (p *ReviewListResp) SetQuestions(val []*ReviewQuestion) {
	p.Questions = val
}

func (p *ReviewListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewListResp(%+v)", *p)
}

var fieldIDToName_ReviewListResp = map[int16]string{
	1: "total_num",
	2: "questions",
}

type SubmitAnswerReq struct {
	UserId       int64   `thrift:"user_id,1" frugal:"1,default,i64" form:"user_id" json:"user_id" query:"user_id"`
	WordId       int64   `thrift:"word_id,2" frugal:"2,default,i64" form:"word_id" json:"word_id"`
	AnswerId     int64   `thrift:"answer_id,3" frugal:"3,default,i64" form:"answer_id" json:"answer_id"`
	QuestionType int64   `thrift:"question_type,4" frugal:"4,default,i64" form:"question_type" json:"question_type"`
	FilledName   *string `thrift:"filled_name,5,optional" frugal:"5,optional,string" form:"filled_name" json:"filled_name,omitempty"`
}

func NewSubmitAnswerReq() *SubmitAnswerReq {
	return &SubmitAnswerReq{}
}

func (p *SubmitAnswerReq) InitDefault() {
}

func (p *SubmitAnswerReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *SubmitAnswerReq) GetWordId() (v int64) {
	return p.WordId
}

func (p *SubmitAnswerReq) GetAnswerId() (v int64) {
	return p.AnswerId
}

func (p *SubmitAnswerReq) GetQuestionType() (v int64) {
	return p.QuestionType
}

var SubmitAnswerReq_FilledName_DEFAULT string

func (p *SubmitAnswerReq) GetFilledName() (v string) {
	if !p.IsSetFilledName() {
		return SubmitAnswerReq_FilledName_DEFAULT
	}
	return *p.FilledName
}
func (p *SubmitAnswerReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *SubmitAnswerReq) SetWordId(val int64) {
	p.WordId = val
}
func (p *SubmitAnswerReq) SetAnswerId(val int64) {
	p.AnswerId = val
}
func (p *SubmitAnswerReq) SetQuestionType(val int64) {
	p.QuestionType = val
}
func (p *SubmitAnswerReq) SetFilledName(val *string) {
	p.FilledName = val
}

func (p *SubmitAnswerReq) IsSetFilledName() bool {
	return p.FilledName != nil
}

func (p *SubmitAnswerReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerReq(%+v)", *p)
}

var fieldIDToName_SubmitAnswerReq = map[int16]string{
	1: "user_id",
	2: "word_id",
	3: "answer_id",
	4: "question_type",
	5: "filled_name",
}

type SubmitAnswerResp struct {
	IsCorrect       bool           `thrift:"is_correct,1" frugal:"1,default,bool" form:"is_correct" json:"is_correct" query:"is_correct"`
	CorrectAnswerId int64          `thrift:"correct_answer_id,2" frugal:"2,default,i64" form:"correct_answer_id" json:"correct_answer_id" query:"correct_answer_id"`
	Message         string         `thrift:"message,3" frugal:"3,default,string" form:"message" json:"message" query:"message"`
	BaseResp        *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitAnswerResp() *SubmitAnswerResp {
	return &SubmitAnswerResp{}
}

func (p *SubmitAnswerResp) InitDefault() {
}

func (p *SubmitAnswerResp) GetIsCorrect() (v bool) {
	return p.IsCorrect
}

func (p *SubmitAnswerResp) GetCorrectAnswerId() (v int64) {
	return p.CorrectAnswerId
}

func (p *SubmitAnswerResp) GetMessage() (v string) {
	return p.Message
}

var SubmitAnswerResp_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitAnswerResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return SubmitAnswerResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitAnswerResp) SetIsCorrect(val bool) {
	p.IsCorrect = val
}
func (p *SubmitAnswerResp) SetCorrectAnswerId(val int64) {
	p.CorrectAnswerId = val
}
func (p *SubmitAnswerResp) SetMessage(val string) {
	p.Message = val
}
func (p *SubmitAnswerResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *SubmitAnswerResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitAnswerResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitAnswerResp(%+v)", *p)
}

var fieldIDToName_SubmitAnswerResp = map[int16]string{
	1:   "is_correct",
	2:   "correct_answer_id",
	3:   "message",
	255: "BaseResp",
}

type ReviewProgressReq struct {
	UserId int64 `thrift:"user_id,1,required" frugal:"1,required,i64" form:"user_id,required" json:"user_id,required" query:"user_id,required"`
}

func NewReviewProgressReq() *ReviewProgressReq {
	return &ReviewProgressReq{}
}

func (p *ReviewProgressReq) InitDefault() {
}

func (p *ReviewProgressReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *ReviewProgressReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *ReviewProgressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewProgressReq(%+v)", *p)
}

var fieldIDToName_ReviewProgressReq = map[int16]string{
	1: "user_id",
}

type ReviewProgressResp struct {
	PendingReviewCount   int32          `thrift:"pending_review_count,1" frugal:"1,default,i32" form:"pending_review_count" json:"pending_review_count" query:"pending_review_count"`
	CompletedReviewCount int32          `thrift:"completed_review_count,2" frugal:"2,default,i32" form:"completed_review_count" json:"completed_review_count" query:"completed_review_count"`
	LastUpdateTime       string         `thrift:"last_update_time,3" frugal:"3,default,string" form:"last_update_time" json:"last_update_time" query:"last_update_time"`
	TotalWordsCount      int32          `thrift:"total_words_count,4" frugal:"4,default,i32" form:"total_words_count" json:"total_words_count" query:"total_words_count"`
	AllCompletedCount    int32          `thrift:"all_completed_count,5" frugal:"5,default,i32" form:"all_completed_count" json:"all_completed_count" query:"all_completed_count"`
	BaseResp             *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewReviewProgressResp() *ReviewProgressResp {
	return &ReviewProgressResp{}
}

func (p *ReviewProgressResp) InitDefault() {
}

func (p *ReviewProgressResp) GetPendingReviewCount() (v int32) {
	return p.PendingReviewCount
}

func (p *ReviewProgressResp) GetCompletedReviewCount() (v int32) {
	return p.CompletedReviewCount
}

func (p *ReviewProgressResp) GetLastUpdateTime() (v string) {
	return p.LastUpdateTime
}

func (p *ReviewProgressResp) GetTotalWordsCount() (v int32) {
	return p.TotalWordsCount
}

func (p *ReviewProgressResp) GetAllCompletedCount() (v int32) {
	return p.AllCompletedCount
}

var ReviewProgressResp_BaseResp_DEFAULT *base.BaseResp

func (p *ReviewProgressResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ReviewProgressResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReviewProgressResp) SetPendingReviewCount(val int32) {
	p.PendingReviewCount = val
}
func (p *ReviewProgressResp) SetCompletedReviewCount(val int32) {
	p.CompletedReviewCount = val
}
func (p *ReviewProgressResp) SetLastUpdateTime(val string) {
	p.LastUpdateTime = val
}
func (p *ReviewProgressResp) SetTotalWordsCount(val int32) {
	p.TotalWordsCount = val
}
func (p *ReviewProgressResp) SetAllCompletedCount(val int32) {
	p.AllCompletedCount = val
}
func (p *ReviewProgressResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *ReviewProgressResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReviewProgressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReviewProgressResp(%+v)", *p)
}

var fieldIDToName_ReviewProgressResp = map[int16]string{
	1:   "pending_review_count",
	2:   "completed_review_count",
	3:   "last_update_time",
	4:   "total_words_count",
	5:   "all_completed_count",
	255: "BaseResp",
}

type TagInfo struct {
	TagId         int64  `thrift:"tag_id,1" frugal:"1,default,i64" form:"tag_id" json:"tag_id" query:"tag_id"`
	TagName       string `thrift:"tag_name,2" frugal:"2,default,string" form:"tag_name" json:"tag_name" query:"tag_name"`
	QuestionTypes int32  `thrift:"question_types,3" frugal:"3,default,i32" form:"question_types" json:"question_types" query:"question_types"`
	MaxScore      int32  `thrift:"max_score,4" frugal:"4,default,i32" form:"max_score" json:"max_score" query:"max_score"`
}

func NewTagInfo() *TagInfo {
	return &TagInfo{}
}

func (p *TagInfo) InitDefault() {
}

func (p *TagInfo) GetTagId() (v int64) {
	return p.TagId
}

func (p *TagInfo) GetTagName() (v string) {
	return p.TagName
}

func (p *TagInfo) GetQuestionTypes() (v int32) {
	return p.QuestionTypes
}

func (p *TagInfo) GetMaxScore() (v int32) {
	return p.MaxScore
}
func (p *TagInfo) SetTagId(val int64) {
	p.TagId = val
}
func (p *TagInfo) SetTagName(val string) {
	p.TagName = val
}
func (p *TagInfo) SetQuestionTypes(val int32) {
	p.QuestionTypes = val
}
func (p *TagInfo) SetMaxScore(val int32) {
	p.MaxScore = val
}

func (p *TagInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagInfo(%+v)", *p)
}

var fieldIDToName_TagInfo = map[int16]string{
	1: "tag_id",
	2: "tag_name",
	3: "question_types",
	4: "max_score",
}

type GetTagsReq struct {
}

func NewGetTagsReq() *GetTagsReq {
	return &GetTagsReq{}
}

func (p *GetTagsReq) InitDefault() {
}

func (p *GetTagsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagsReq(%+v)", *p)
}

var fieldIDToName_GetTagsReq = map[int16]string{}

type GetTagsResp struct {
	Tags     []*TagInfo     `thrift:"tags,1" frugal:"1,default,list<TagInfo>" form:"tags" json:"tags" query:"tags"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetTagsResp() *GetTagsResp {
	return &GetTagsResp{}
}

func (p *GetTagsResp) InitDefault() {
}

func (p *GetTagsResp) GetTags() (v []*TagInfo) {
	return p.Tags
}

var GetTagsResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetTagsResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetTagsResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTagsResp) SetTags(val []*TagInfo) {
	p.Tags = val
}
func (p *GetTagsResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetTagsResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTagsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagsResp(%+v)", *p)
}

var fieldIDToName_GetTagsResp = map[int16]string{
	1:   "tags",
	255: "BaseResp",
}

type WordDetail struct {
	NewWordName_ string          `thrift:"new_word_name,1" frugal:"1,default,string" form:"new_word_name" json:"new_word_name" query:"new_word_name"`
	Description  string          `thrift:"description,2" frugal:"2,default,string" form:"description" json:"description" query:"description"`
	Explains     string          `thrift:"explains,3" frugal:"3,default,string" form:"explains" json:"explains" query:"explains"`
	PronounceUs  *PronounceInfo  `thrift:"pronounce_us,4" frugal:"4,default,PronounceInfo" form:"pronounce_us" json:"pronounce_us" query:"pronounce_us"`
	PronounceUk  *PronounceInfo  `thrift:"pronounce_uk,5" frugal:"5,default,PronounceInfo" form:"pronounce_uk" json:"pronounce_uk" query:"pronounce_uk"`
	Sentences    []*SentenceInfo `thrift:"sentences,6" frugal:"6,default,list<SentenceInfo>" form:"sentences" json:"sentences" query:"sentences"`
}

func NewWordDetail() *WordDetail {
	return &WordDetail{}
}

func (p *WordDetail) InitDefault() {
}

func (p *WordDetail) GetNewWordName_() (v string) {
	return p.NewWordName_
}

func (p *WordDetail) GetDescription() (v string) {
	return p.Description
}

func (p *WordDetail) GetExplains() (v string) {
	return p.Explains
}

var WordDetail_PronounceUs_DEFAULT *PronounceInfo

func (p *WordDetail) GetPronounceUs() (v *PronounceInfo) {
	if !p.IsSetPronounceUs() {
		return WordDetail_PronounceUs_DEFAULT
	}
	return p.PronounceUs
}

var WordDetail_PronounceUk_DEFAULT *PronounceInfo

func (p *WordDetail) GetPronounceUk() (v *PronounceInfo) {
	if !p.IsSetPronounceUk() {
		return WordDetail_PronounceUk_DEFAULT
	}
	return p.PronounceUk
}

func (p *WordDetail) GetSentences() (v []*SentenceInfo) {
	return p.Sentences
}
func (p *WordDetail) SetNewWordName_(val string) {
	p.NewWordName_ = val
}
func (p *WordDetail) SetDescription(val string) {
	p.Description = val
}
func (p *WordDetail) SetExplains(val string) {
	p.Explains = val
}
func (p *WordDetail) SetPronounceUs(val *PronounceInfo) {
	p.PronounceUs = val
}
func (p *WordDetail) SetPronounceUk(val *PronounceInfo) {
	p.PronounceUk = val
}
func (p *WordDetail) SetSentences(val []*SentenceInfo) {
	p.Sentences = val
}

func (p *WordDetail) IsSetPronounceUs() bool {
	return p.PronounceUs != nil
}

func (p *WordDetail) IsSetPronounceUk() bool {
	return p.PronounceUk != nil
}

func (p *WordDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordDetail(%+v)", *p)
}

var fieldIDToName_WordDetail = map[int16]string{
	1: "new_word_name",
	2: "description",
	3: "explains",
	4: "pronounce_us",
	5: "pronounce_uk",
	6: "sentences",
}

type WordResp struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,1" frugal:"1,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
	Word     *Word          `thrift:"word,2,optional" frugal:"2,optional,Word" form:"word" json:"word,omitempty" query:"word"`
}

func NewWordResp() *WordResp {
	return &WordResp{}
}

func (p *WordResp) InitDefault() {
}

var WordResp_BaseResp_DEFAULT *base.BaseResp

func (p *WordResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return WordResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var WordResp_Word_DEFAULT *Word

func (p *WordResp) GetWord() (v *Word) {
	if !p.IsSetWord() {
		return WordResp_Word_DEFAULT
	}
	return p.Word
}
func (p *WordResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *WordResp) SetWord(val *Word) {
	p.Word = val
}

func (p *WordResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *WordResp) IsSetWord() bool {
	return p.Word != nil
}

func (p *WordResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordResp(%+v)", *p)
}

var fieldIDToName_WordResp = map[int16]string{
	1: "BaseResp",
	2: "word",
}

type WordService interface {
	Chat(ctx context.Context, req *ChatReq, stream WordService_ChatServer) (err error)

	GetWordList(ctx context.Context, req *WordListReq) (r *WordListResp, err error)

	GetWordDetail(ctx context.Context, wordName string) (r *WordDetail, err error)

	GetWordByID(ctx context.Context, wordId int64) (r *WordResp, err error)

	AddNewWord(ctx context.Context, req *AddWordReq) (r *WordResp, err error)

	UpdateWordTagID(ctx context.Context, req *UpdateWordTag) (r *WordResp, err error)

	GetReviewWordList(ctx context.Context, req *ReviewListReq) (r *ReviewListResp, err error)

	GetTodayReviewProgress(ctx context.Context, req *ReviewProgressReq) (r *ReviewProgressResp, err error)

	SubmitAnswer(ctx context.Context, req *SubmitAnswerReq) (r *SubmitAnswerResp, err error)

	GetSupportedTags(ctx context.Context, req *GetTagsReq) (r *GetTagsResp, err error)
}

type WordServiceChatArgs struct {
	Req *ChatReq `thrift:"req,1" frugal:"1,default,ChatReq"`
}

func NewWordServiceChatArgs() *WordServiceChatArgs {
	return &WordServiceChatArgs{}
}

func (p *WordServiceChatArgs) InitDefault() {
}

var WordServiceChatArgs_Req_DEFAULT *ChatReq

func (p *WordServiceChatArgs) GetReq() (v *ChatReq) {
	if !p.IsSetReq() {
		return WordServiceChatArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceChatArgs) SetReq(val *ChatReq) {
	p.Req = val
}

func (p *WordServiceChatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceChatArgs(%+v)", *p)
}

var fieldIDToName_WordServiceChatArgs = map[int16]string{
	1: "req",
}

type WordServiceChatResult struct {
	Success *ChatResp `thrift:"success,0,optional" frugal:"0,optional,ChatResp"`
}

func NewWordServiceChatResult() *WordServiceChatResult {
	return &WordServiceChatResult{}
}

func (p *WordServiceChatResult) InitDefault() {
}

var WordServiceChatResult_Success_DEFAULT *ChatResp

func (p *WordServiceChatResult) GetSuccess() (v *ChatResp) {
	if !p.IsSetSuccess() {
		return WordServiceChatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatResp)
}

func (p *WordServiceChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceChatResult(%+v)", *p)
}

var fieldIDToName_WordServiceChatResult = map[int16]string{
	0: "success",
}

type WordService_ChatServer streaming.ServerStreamingServer[ChatResp]

type WordServiceGetWordListArgs struct {
	Req *WordListReq `thrift:"req,1" frugal:"1,default,WordListReq"`
}

func NewWordServiceGetWordListArgs() *WordServiceGetWordListArgs {
	return &WordServiceGetWordListArgs{}
}

func (p *WordServiceGetWordListArgs) InitDefault() {
}

var WordServiceGetWordListArgs_Req_DEFAULT *WordListReq

func (p *WordServiceGetWordListArgs) GetReq() (v *WordListReq) {
	if !p.IsSetReq() {
		return WordServiceGetWordListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceGetWordListArgs) SetReq(val *WordListReq) {
	p.Req = val
}

func (p *WordServiceGetWordListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceGetWordListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordListArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordListArgs = map[int16]string{
	1: "req",
}

type WordServiceGetWordListResult struct {
	Success *WordListResp `thrift:"success,0,optional" frugal:"0,optional,WordListResp"`
}

func NewWordServiceGetWordListResult() *WordServiceGetWordListResult {
	return &WordServiceGetWordListResult{}
}

func (p *WordServiceGetWordListResult) InitDefault() {
}

var WordServiceGetWordListResult_Success_DEFAULT *WordListResp

func (p *WordServiceGetWordListResult) GetSuccess() (v *WordListResp) {
	if !p.IsSetSuccess() {
		return WordServiceGetWordListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetWordListResult) SetSuccess(x interface{}) {
	p.Success = x.(*WordListResp)
}

func (p *WordServiceGetWordListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetWordListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordListResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordListResult = map[int16]string{
	0: "success",
}

type WordServiceGetWordDetailArgs struct {
	WordName string `thrift:"word_name,1" frugal:"1,default,string"`
}

func NewWordServiceGetWordDetailArgs() *WordServiceGetWordDetailArgs {
	return &WordServiceGetWordDetailArgs{}
}

func (p *WordServiceGetWordDetailArgs) InitDefault() {
}

func (p *WordServiceGetWordDetailArgs) GetWordName() (v string) {
	return p.WordName
}
func (p *WordServiceGetWordDetailArgs) SetWordName(val string) {
	p.WordName = val
}

func (p *WordServiceGetWordDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordDetailArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordDetailArgs = map[int16]string{
	1: "word_name",
}

type WordServiceGetWordDetailResult struct {
	Success *WordDetail `thrift:"success,0,optional" frugal:"0,optional,WordDetail"`
}

func NewWordServiceGetWordDetailResult() *WordServiceGetWordDetailResult {
	return &WordServiceGetWordDetailResult{}
}

func (p *WordServiceGetWordDetailResult) InitDefault() {
}

var WordServiceGetWordDetailResult_Success_DEFAULT *WordDetail

func (p *WordServiceGetWordDetailResult) GetSuccess() (v *WordDetail) {
	if !p.IsSetSuccess() {
		return WordServiceGetWordDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetWordDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*WordDetail)
}

func (p *WordServiceGetWordDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetWordDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordDetailResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordDetailResult = map[int16]string{
	0: "success",
}

type WordServiceGetWordByIDArgs struct {
	WordId int64 `thrift:"word_id,1" frugal:"1,default,i64"`
}

func NewWordServiceGetWordByIDArgs() *WordServiceGetWordByIDArgs {
	return &WordServiceGetWordByIDArgs{}
}

func (p *WordServiceGetWordByIDArgs) InitDefault() {
}

func (p *WordServiceGetWordByIDArgs) GetWordId() (v int64) {
	return p.WordId
}
func (p *WordServiceGetWordByIDArgs) SetWordId(val int64) {
	p.WordId = val
}

func (p *WordServiceGetWordByIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordByIDArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordByIDArgs = map[int16]string{
	1: "word_id",
}

type WordServiceGetWordByIDResult struct {
	Success *WordResp `thrift:"success,0,optional" frugal:"0,optional,WordResp"`
}

func NewWordServiceGetWordByIDResult() *WordServiceGetWordByIDResult {
	return &WordServiceGetWordByIDResult{}
}

func (p *WordServiceGetWordByIDResult) InitDefault() {
}

var WordServiceGetWordByIDResult_Success_DEFAULT *WordResp

func (p *WordServiceGetWordByIDResult) GetSuccess() (v *WordResp) {
	if !p.IsSetSuccess() {
		return WordServiceGetWordByIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetWordByIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*WordResp)
}

func (p *WordServiceGetWordByIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetWordByIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetWordByIDResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetWordByIDResult = map[int16]string{
	0: "success",
}

type WordServiceAddNewWordArgs struct {
	Req *AddWordReq `thrift:"req,1" frugal:"1,default,AddWordReq"`
}

func NewWordServiceAddNewWordArgs() *WordServiceAddNewWordArgs {
	return &WordServiceAddNewWordArgs{}
}

func (p *WordServiceAddNewWordArgs) InitDefault() {
}

var WordServiceAddNewWordArgs_Req_DEFAULT *AddWordReq

func (p *WordServiceAddNewWordArgs) GetReq() (v *AddWordReq) {
	if !p.IsSetReq() {
		return WordServiceAddNewWordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceAddNewWordArgs) SetReq(val *AddWordReq) {
	p.Req = val
}

func (p *WordServiceAddNewWordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceAddNewWordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceAddNewWordArgs(%+v)", *p)
}

var fieldIDToName_WordServiceAddNewWordArgs = map[int16]string{
	1: "req",
}

type WordServiceAddNewWordResult struct {
	Success *WordResp `thrift:"success,0,optional" frugal:"0,optional,WordResp"`
}

func NewWordServiceAddNewWordResult() *WordServiceAddNewWordResult {
	return &WordServiceAddNewWordResult{}
}

func (p *WordServiceAddNewWordResult) InitDefault() {
}

var WordServiceAddNewWordResult_Success_DEFAULT *WordResp

func (p *WordServiceAddNewWordResult) GetSuccess() (v *WordResp) {
	if !p.IsSetSuccess() {
		return WordServiceAddNewWordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceAddNewWordResult) SetSuccess(x interface{}) {
	p.Success = x.(*WordResp)
}

func (p *WordServiceAddNewWordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceAddNewWordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceAddNewWordResult(%+v)", *p)
}

var fieldIDToName_WordServiceAddNewWordResult = map[int16]string{
	0: "success",
}

type WordServiceUpdateWordTagIDArgs struct {
	Req *UpdateWordTag `thrift:"req,1" frugal:"1,default,UpdateWordTag"`
}

func NewWordServiceUpdateWordTagIDArgs() *WordServiceUpdateWordTagIDArgs {
	return &WordServiceUpdateWordTagIDArgs{}
}

func (p *WordServiceUpdateWordTagIDArgs) InitDefault() {
}

var WordServiceUpdateWordTagIDArgs_Req_DEFAULT *UpdateWordTag

func (p *WordServiceUpdateWordTagIDArgs) GetReq() (v *UpdateWordTag) {
	if !p.IsSetReq() {
		return WordServiceUpdateWordTagIDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceUpdateWordTagIDArgs) SetReq(val *UpdateWordTag) {
	p.Req = val
}

func (p *WordServiceUpdateWordTagIDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceUpdateWordTagIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceUpdateWordTagIDArgs(%+v)", *p)
}

var fieldIDToName_WordServiceUpdateWordTagIDArgs = map[int16]string{
	1: "req",
}

type WordServiceUpdateWordTagIDResult struct {
	Success *WordResp `thrift:"success,0,optional" frugal:"0,optional,WordResp"`
}

func NewWordServiceUpdateWordTagIDResult() *WordServiceUpdateWordTagIDResult {
	return &WordServiceUpdateWordTagIDResult{}
}

func (p *WordServiceUpdateWordTagIDResult) InitDefault() {
}

var WordServiceUpdateWordTagIDResult_Success_DEFAULT *WordResp

func (p *WordServiceUpdateWordTagIDResult) GetSuccess() (v *WordResp) {
	if !p.IsSetSuccess() {
		return WordServiceUpdateWordTagIDResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceUpdateWordTagIDResult) SetSuccess(x interface{}) {
	p.Success = x.(*WordResp)
}

func (p *WordServiceUpdateWordTagIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceUpdateWordTagIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceUpdateWordTagIDResult(%+v)", *p)
}

var fieldIDToName_WordServiceUpdateWordTagIDResult = map[int16]string{
	0: "success",
}

type WordServiceGetReviewWordListArgs struct {
	Req *ReviewListReq `thrift:"req,1" frugal:"1,default,ReviewListReq"`
}

func NewWordServiceGetReviewWordListArgs() *WordServiceGetReviewWordListArgs {
	return &WordServiceGetReviewWordListArgs{}
}

func (p *WordServiceGetReviewWordListArgs) InitDefault() {
}

var WordServiceGetReviewWordListArgs_Req_DEFAULT *ReviewListReq

func (p *WordServiceGetReviewWordListArgs) GetReq() (v *ReviewListReq) {
	if !p.IsSetReq() {
		return WordServiceGetReviewWordListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceGetReviewWordListArgs) SetReq(val *ReviewListReq) {
	p.Req = val
}

func (p *WordServiceGetReviewWordListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceGetReviewWordListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetReviewWordListArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetReviewWordListArgs = map[int16]string{
	1: "req",
}

type WordServiceGetReviewWordListResult struct {
	Success *ReviewListResp `thrift:"success,0,optional" frugal:"0,optional,ReviewListResp"`
}

func NewWordServiceGetReviewWordListResult() *WordServiceGetReviewWordListResult {
	return &WordServiceGetReviewWordListResult{}
}

func (p *WordServiceGetReviewWordListResult) InitDefault() {
}

var WordServiceGetReviewWordListResult_Success_DEFAULT *ReviewListResp

func (p *WordServiceGetReviewWordListResult) GetSuccess() (v *ReviewListResp) {
	if !p.IsSetSuccess() {
		return WordServiceGetReviewWordListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetReviewWordListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReviewListResp)
}

func (p *WordServiceGetReviewWordListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetReviewWordListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetReviewWordListResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetReviewWordListResult = map[int16]string{
	0: "success",
}

type WordServiceGetTodayReviewProgressArgs struct {
	Req *ReviewProgressReq `thrift:"req,1" frugal:"1,default,ReviewProgressReq"`
}

func NewWordServiceGetTodayReviewProgressArgs() *WordServiceGetTodayReviewProgressArgs {
	return &WordServiceGetTodayReviewProgressArgs{}
}

func (p *WordServiceGetTodayReviewProgressArgs) InitDefault() {
}

var WordServiceGetTodayReviewProgressArgs_Req_DEFAULT *ReviewProgressReq

func (p *WordServiceGetTodayReviewProgressArgs) GetReq() (v *ReviewProgressReq) {
	if !p.IsSetReq() {
		return WordServiceGetTodayReviewProgressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceGetTodayReviewProgressArgs) SetReq(val *ReviewProgressReq) {
	p.Req = val
}

func (p *WordServiceGetTodayReviewProgressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceGetTodayReviewProgressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetTodayReviewProgressArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetTodayReviewProgressArgs = map[int16]string{
	1: "req",
}

type WordServiceGetTodayReviewProgressResult struct {
	Success *ReviewProgressResp `thrift:"success,0,optional" frugal:"0,optional,ReviewProgressResp"`
}

func NewWordServiceGetTodayReviewProgressResult() *WordServiceGetTodayReviewProgressResult {
	return &WordServiceGetTodayReviewProgressResult{}
}

func (p *WordServiceGetTodayReviewProgressResult) InitDefault() {
}

var WordServiceGetTodayReviewProgressResult_Success_DEFAULT *ReviewProgressResp

func (p *WordServiceGetTodayReviewProgressResult) GetSuccess() (v *ReviewProgressResp) {
	if !p.IsSetSuccess() {
		return WordServiceGetTodayReviewProgressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetTodayReviewProgressResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReviewProgressResp)
}

func (p *WordServiceGetTodayReviewProgressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetTodayReviewProgressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetTodayReviewProgressResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetTodayReviewProgressResult = map[int16]string{
	0: "success",
}

type WordServiceSubmitAnswerArgs struct {
	Req *SubmitAnswerReq `thrift:"req,1" frugal:"1,default,SubmitAnswerReq"`
}

func NewWordServiceSubmitAnswerArgs() *WordServiceSubmitAnswerArgs {
	return &WordServiceSubmitAnswerArgs{}
}

func (p *WordServiceSubmitAnswerArgs) InitDefault() {
}

var WordServiceSubmitAnswerArgs_Req_DEFAULT *SubmitAnswerReq

func (p *WordServiceSubmitAnswerArgs) GetReq() (v *SubmitAnswerReq) {
	if !p.IsSetReq() {
		return WordServiceSubmitAnswerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceSubmitAnswerArgs) SetReq(val *SubmitAnswerReq) {
	p.Req = val
}

func (p *WordServiceSubmitAnswerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceSubmitAnswerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceSubmitAnswerArgs(%+v)", *p)
}

var fieldIDToName_WordServiceSubmitAnswerArgs = map[int16]string{
	1: "req",
}

type WordServiceSubmitAnswerResult struct {
	Success *SubmitAnswerResp `thrift:"success,0,optional" frugal:"0,optional,SubmitAnswerResp"`
}

func NewWordServiceSubmitAnswerResult() *WordServiceSubmitAnswerResult {
	return &WordServiceSubmitAnswerResult{}
}

func (p *WordServiceSubmitAnswerResult) InitDefault() {
}

var WordServiceSubmitAnswerResult_Success_DEFAULT *SubmitAnswerResp

func (p *WordServiceSubmitAnswerResult) GetSuccess() (v *SubmitAnswerResp) {
	if !p.IsSetSuccess() {
		return WordServiceSubmitAnswerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceSubmitAnswerResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitAnswerResp)
}

func (p *WordServiceSubmitAnswerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceSubmitAnswerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceSubmitAnswerResult(%+v)", *p)
}

var fieldIDToName_WordServiceSubmitAnswerResult = map[int16]string{
	0: "success",
}

type WordServiceGetSupportedTagsArgs struct {
	Req *GetTagsReq `thrift:"req,1" frugal:"1,default,GetTagsReq"`
}

func NewWordServiceGetSupportedTagsArgs() *WordServiceGetSupportedTagsArgs {
	return &WordServiceGetSupportedTagsArgs{}
}

func (p *WordServiceGetSupportedTagsArgs) InitDefault() {
}

var WordServiceGetSupportedTagsArgs_Req_DEFAULT *GetTagsReq

func (p *WordServiceGetSupportedTagsArgs) GetReq() (v *GetTagsReq) {
	if !p.IsSetReq() {
		return WordServiceGetSupportedTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *WordServiceGetSupportedTagsArgs) SetReq(val *GetTagsReq) {
	p.Req = val
}

func (p *WordServiceGetSupportedTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *WordServiceGetSupportedTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetSupportedTagsArgs(%+v)", *p)
}

var fieldIDToName_WordServiceGetSupportedTagsArgs = map[int16]string{
	1: "req",
}

type WordServiceGetSupportedTagsResult struct {
	Success *GetTagsResp `thrift:"success,0,optional" frugal:"0,optional,GetTagsResp"`
}

func NewWordServiceGetSupportedTagsResult() *WordServiceGetSupportedTagsResult {
	return &WordServiceGetSupportedTagsResult{}
}

func (p *WordServiceGetSupportedTagsResult) InitDefault() {
}

var WordServiceGetSupportedTagsResult_Success_DEFAULT *GetTagsResp

func (p *WordServiceGetSupportedTagsResult) GetSuccess() (v *GetTagsResp) {
	if !p.IsSetSuccess() {
		return WordServiceGetSupportedTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *WordServiceGetSupportedTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTagsResp)
}

func (p *WordServiceGetSupportedTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WordServiceGetSupportedTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WordServiceGetSupportedTagsResult(%+v)", *p)
}

var fieldIDToName_WordServiceGetSupportedTagsResult = map[int16]string{
	0: "success",
}
